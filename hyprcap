#!/usr/bin/env bash

readonly VERSION="1.2.1"

# TODO: This is rather a tmp file than a cache file. Fix it?
readonly CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/hyprcap"
readonly CAPTURE_FILENAME="capture"
readonly REC_PID_PATH="${XDG_RUNTIME_DIR:-/run}/hyprcap_rec.pid"

readonly DEF_SCREENSHOT_DIR="${XDG_PICTURES_DIR:-$HOME/Pictures}/Screenshots"
readonly DEF_RECORDING_DIR="${XDG_VIDEOS_DIR:-$HOME/Videos}/Captures"
readonly DEF_SCREENSHOT_FILENAME="$(date +'%Y-%m-%d-%H%M%S_hyprcap.png')"
readonly DEF_RECORDING_FILENAME="$(date +'%Y-%m-%d-%H%M%S_hyprcap.mp4')"

readonly DMENU_COMMAND="fuzzel -d"

readonly SLURP_BORDER_WEIGHT=1

# readonly DUNST_TAG="hyprcap" # Only for dunst
readonly NOTIF_ID="1978388086" # Random ID generated by `qalc 'rand(2^31-1)'`


# =============== Help, Version, logging ===============

function Help() {
    cat <<EOF
Usage: hyprcap [options...] <command> [[-s] <selection>]

HyprCap is a utility to easily capture screenshots and screen recordings on
Hyprland.

Please report bugs and issues at
https://github.com/alonso-herreros/hyprcap/issues

Commands:
  shot | screenshot            Take a screenshot
  rec | record                 Toggle screen recording
  rec-start | record-start     Start a screen recording
  rec-stop | record-stop       Stop a screen recording

A selection can be specified after the command, with the -s or --selection
option, or using a fuzzel (dmenu-like) menu if neither is specified.

Selection:
  monitor                   Select an entire monitor interactively.
  monitor:active            Select the currently focused monitor.
  monitor:<name>            Select the monitor with the exact given name

  window                    Select a visible window interactively.
  window:active             Select the currently focused window.
  window:<title>            Select the first window that contains the title.

  region                    Select a region manually using 'slurp'.
  region:X,Y,WxH            Select the specified region.


Selection options:
  -s, --select <selection>      Alternative way to specify the selection.

Saving options:
  -w, --write                   Save the capture to a file using the default
                                filename and directory.
  -o, --output-dir <dir>        Directory in which to save captures.
                                Default: \$XDG_PICTURES_DIR/Screenshots or
                                \$XDG_VIDEOS_DIR/Captures
  -f, --filename <filename>     The file name for the resulting capture within
                                the output directory.
                                Default:
                                  YYYY-MM-DD-hhmmss_hyprcap.<extension>
                                where <extension> is determined by the command
                                (e.g. png for screenshots, mp4 for recordings).
  -F, --no-file                 Don't save captures to a file (default).
  -c, --copy                    Copy capture to clipboard with 'wl-copy'.

Capture options:
  -d, --delay <time>            How long to delay starting the capture after
                                selection is done in seconds.
  -z, --freeze                  Freeze the screen on initialization. Only
                                available for screenshots.

Notification options:
  -n, --notify                  Send a notification when capture is done.
                                (default).
  -N, --no-notify               Don't send notifications.
  -a, --actions                 Show actions in the notification (default).
                                Requires --notify.
  -A, --no-actions              Don't show actions in the notification. Requires
                                --notify.
  -t, --notif-timeout <time>    Notification timeout in milliseconds. Requires
                                --notify
                                Default: 10 seconds.

Output options:
  -r, --raw                     Output raw capture data to stdout.
  -v, --verbose                 Print extra information. Specify multiple times
                                to increase verbosity.
  -q, --quiet                   Print less information.
  --disable-title               Forcefully disable setting the terminal title.
                                Useful if the terminal title setting code is
                                causing issues, e.g. when running in a script.
  -V, --version                 Show the version and exit.
  -h, --help                    Show this help message and exit.

Examples:
  Toggle recording current monitor      \`hyprcap rec monitor:active\`
  Screenshot a window (interactive)     \`hyprcap shot window\`
  Toggle recording a specific region    \`hyprcap rec region:100,100,400x300\`
  Stop an ongoing recording             \`hyprcap rec-stop\`
EOF
}

function Version() {
    echo "HyprCap version $VERSION"
}

function NYI() {
    Print -E "Fatal: You have requested a feature that is not yet implemented\n"
}

function Print() {
    # Sort of like an if with a string pattern match
    case "$1" in -*)
        local level=${1#-}
        shift;;
    esac
    [ "$level" == "E" ] && level=-1 # Error level
    [ $VERBOSE -ge ${level:-0} ] && printf "$@" 1>&2
}

# Checks if a command is available. Only the first argument is used.
function check_cmd() {
    local cmd="$1"
    # If command is found, return early
    command -v "$cmd" >/dev/null && return 0

    # If command is not found, print error and return with error
    Print -E "Error: command '$cmd' not found. "
    Print -E "Check the list of optional dependencies and options selected.\n"
    Print -E "You may be able to install it using your package manager.\n\n"
    Print -E "Check the README for more information:\n"
    Print -E "https://github.com/alonso-herreros/hyprcap"
    return 1
}


# =============== Main operations ===============

# --------------- Capture functions ---------------

function screenshot() {
    local capture_path="$CAPTURE_PATH"

    grim -g "$GEOMETRY" "$capture_path"
}

function record_start() {
    Print -1 "Starting screen recording of $GEOMETRY\n"
    local capture_path="$CAPTURE_PATH"

    if [ -r "$REC_PID_PATH" ]; then
        Print -E "Error: Screen recording is already in progress.\n"
        return 1
    fi

    # We send this to the background so we can store its PID in a file.
    # Otherwise, we wouldn't be able to gracefully stop it from the outside.
    wf-recorder -g "$GEOMETRY" -f "$capture_path" --overwrite --audio &
    local rec_pid=$!
    echo "$rec_pid" > "$REC_PID_PATH"

    # This lets the shell pass the SIGINT signal to the recording process
    # instead of getting killed while waiting.
    Print -1 "Setting up SIGINT trap.\n"
    trap 'record_stop' INT

    # Then we wait for the recording to finish. Then we can move on to
    # operations (notifications, saving, etc.)
    Print -1 "Waiting for process $rec_pid to finish...\n"
    wait "$rec_pid"
    Print -1 "Process $rec_pid finished.\n"
    local exit_code=$?

    # Once wf-recorder exits, we can remove the PID file
    rm "$REC_PID_PATH" 2>/dev/null
    # And return the exit code from the recording command
    return $exit_code
}

function record_stop() {
    Print -1 "Stopping screen recording\n"

    trap - INT # Remove the SIGINT trap

    if [ ! -r "$REC_PID_PATH" ]; then
        Print -E "Error: No screen recording PID found.\n"
        return 1
    fi

    local rec_pid=$(cat "$REC_PID_PATH")

    if ! kill -INT "$rec_pid"; then
        Print -E "Error: Failed to send a stop signal.\n"
        return 1
    fi
}

# --------------- Geometry grabbing ---------------

# function list_geometry () {
#     # [ "$1" = with_title ] && local append="\t\(.title)"
#     # [ "$1" = only_title ] && local append="\t\(.title)" || local info=""
#     hyprctl -j clients | jq -r '.[] | select(.workspace.id | contains('$(hyprctl -j monitors | jq -r 'map(.activeWorkspace.id) | join(",")')'))'
# }

function get_geometry() {
    local geometry=

    case $SELECTION in
        region)
            geometry=$(grab_region)
            geometry=$(trim_slurp_border "$geometry")
            ;;
        monitor)
            if [ $SELECT_ACTIVE -eq 1 ]; then
                geometry=$(grab_monitor_active)
            elif [ -n "$SELECT_MATCH" ]; then
                geometry=$(grab_monitor_match $SELECT_MATCH)
            else
                geometry=$(grab_monitor)
            fi
            ;;
        window)
            if [ $SELECT_ACTIVE -eq 1 ]; then
                geometry=$(grab_window_active)
            elif [ -n "$SELECT_MATCH" ]; then
                geometry=$(grab_window_match "$SELECT_MATCH")
            else
                geometry=$(grab_window)
            fi
            ;;
        *)
            geometry="$SELECTION"
            ;;
    esac
    echo "$geometry"
}

function grab_region() {
    slurp -d -w "$SLURP_BORDER_WEIGHT"
}

function grab_monitor() {
    slurp -or
}

function grab_monitor_active() {
    local active_workspace_id=$(hyprctl -j activeworkspace | jq -r '.id')
    local monitors=$(hyprctl -j monitors)
    local active_monitor="$(echo $monitors \
        | jq -r '.[] | select(.activeWorkspace.id == '$active_workspace_id')')"

    Print -2 "Active workspace ID: $active_workspace_id\n"
    Print -2 "Monitors: $monitors\n"
    Print -2 "Current monitor: $active_monitor\n"

    echo $active_monitor | geometry_from_monitor
}

function grab_monitor_match() {
    local name="$1"
    local monitors=$(hyprctl -j monitors)
    local matching_monitor=$(echo $monitors \
        | jq --arg name "$name" -r '.[] | select(.name == $name)')

    Print -2 "Monitors: $monitors\n"
    Print -2 "Matching monitor: $matching_monitor\n"

    if [ -z "$matching_monitor" ]; then
        Print -E "Error: No monitor with name '$name' found.\n"
        exit 1
    fi

    echo $matching_monitor | geometry_from_monitor
}

function grab_window() {
    local visible_windows=$(get_visible_windows)

    Print -2 "Visible windows: $visible_windows\n"

    # Generate boxes for each visible window and send that to slurp
    local boxes="$(echo $visible_windows | jq '.[]' | geometry_from_window)"

    Print -1 "Window boxes:\n$boxes\n"

    echo "$boxes" | slurp -r
}

function grab_window_active() {
    local active_window=$(hyprctl -j activewindow)

    Print -2 "Active window: $active_window\n"

    if [ "$active_window" = "{}" ]; then
        Print -E "Error: No active window found.\n"
        exit 1
    fi

    echo $active_window | geometry_from_window
}

function grab_window_match() {
    local title="$1"
    local visible_windows=$(get_visible_windows)
    local matching_windows=$(echo $visible_windows \
        | jq --arg title "$title" -r 'map(select(.title | contains($title)))')
    local matching_window=$(echo $matching_windows | jq -r 'first')

    Print -2 "Visible windows: $visible_windows\n"
    Print -2 "Matching windows: $matching_windows\n"
    Print -2 "First matching window: $matching_window\n"

    if [ "$matching_window" = "null" ]; then
        Print -E "Error: No window with title '$title' found.\n"
        exit 1
    fi

    echo $matching_window | geometry_from_window
}

function get_visible_windows() {
    local monitors=$(hyprctl -j monitors)
    local workspaces=$(hyprctl -j workspaces)
    # Workspaces that are not active (i.e. not visible on any monitor)
    local active_ids=$(echo $monitors \
        | jq '[map(.activeWorkspace.id), map(.specialWorkspace.id)] | flatten')
    # Workspaces with fullscreen windows
    local fullscreen_ids=$(echo $workspaces \
        | jq 'map(select(.hasfullscreen) | .id)')

    Print -2 "Active workspaces IDs: $active_ids\n"
    Print -2 "Fullscreen workspaces IDs: $fullscreen_ids\n"

    local windows=$(hyprctl -j clients)
    # Windows need to:
    # * be on a visible workspace
    # * not hidden (e.g. inactive in a group)
    # * not be in a fullscreen workspace, or be fullscreen
    echo $windows \
        | jq --argjson active_ids "$active_ids" \
            --argjson fullscreen_ids "$fullscreen_ids" \
        'map(select(
            ([.workspace.id]|inside($active_ids)) and
            (.hidden|not) and
            (([.workspace.id]|inside($fullscreen_ids)|not) or (.fullscreen!=0))
        ))'
}

function geometry_from_monitor() {
    jq -r '"\(.x),\(.y) \(.width/.scale|round)x\(.height/.scale|round)"'
}

function geometry_from_window() {
    jq -r '"\(.at[0]),\(.at[1]) \(.size[0])x\(.size[1])"'
}

# --------------- Trimming ---------------

function trim_slurp_border() {
    local geometry="$1"
    local border=$SLURP_BORDER_WEIGHT

    local xy_str=${geometry% *} # Get the first part (X,Y)
    local wh_str=${geometry#* } # Get the second part (WxH)
    local x=${xy_str%,*}        # Get the X coordinate
    local y=${xy_str#*,}        # Get the Y coordinate
    local width=${wh_str%x*}    # Get the width
    local height=${wh_str#*x}   # Get the height

    # Remove the 1px border
    x=$((x + $border))
    y=$((y + $border))
    width=$((width - 2 * $border))
    height=$((height - 2 * $border))

    # Ensure width and height are not negative
    [ $width -lt 0 ] && width=0
    [ $height -lt 0 ] && height=0

    # Output the trimmed geometry
    echo "$x,$y ${width}x${height}"
}

# Grim can capture multiple monitors and in even outside of them. However,
# wf-recorder cannot and fails. This should trim the geometry to one monitor.
# function trim_to_monitor() {
#     Print "Trimming '$1' to fit in one monitor\n"
#     local geometry="$1"

#     local xy_str=${geometry% *} # Get the first part (X,Y)
#     local wh_str=${geometry#* } # Get the second part (WxH)
#     local x=${xy_str%,*}        # Get the X coordinate
#     local y=${xy_str#*,}        # Get the Y coordinate
#     local width=${wh_str%x*}    # Get the width
#     local height=${wh_str#*x}   # Get the height

#     local max_width=$(hyprctl monitors -j | jq -r '[.[] | if (.transform % 2 == 0) then (.x + .width) else (.x + .height) end] | max')
#     local max_height=$(hyprctl monitors -j | jq -r '[.[] | if (.transform % 2 == 0) then (.y + .height) else (.y + .width) end] | max')

#     local min_x=$(hyprctl monitors -j | jq -r '[.[] | (.x)] | min')
#     local min_y=$(hyprctl monitors -j | jq -r '[.[] | (.y)] | min')

#     local cropped_x=$x
#     local cropped_y=$y
#     local cropped_width=$width
#     local cropped_height=$height

#     if ((x + width > max_width)); then
#         cropped_width=$((max_width - x))
#     fi
#     if ((y + height > max_height)); then
#         cropped_height=$((max_height - y))
#     fi

#     if ((x < min_x)); then
#         cropped_x="$min_x"
#         cropped_width=$((cropped_width + x - min_x))
#     fi
#     if ((y < min_y)); then
#         cropped_y="$min_y"
#         cropped_height=$((cropped_height + y - min_y))
#     fi

#     local cropped=$(printf "%s,%s %sx%s\n" \
#         "${cropped_x}" "${cropped_y}" \
#         "${cropped_width}" "${cropped_height}")
#     Print "Crop: %s\n" "${cropped}"
#     echo ${cropped}
# }

# =============== Secondary operations ===============

# --------------- Notifications --------------

readonly ACTIONS_ARGS=(
    "-A" "default='Save to file'"
    "-A" "copy='Copy to clipboard'"
    "-A" "edit='Edit'"
)
function notify() {
    NOTIFY=1 # In case it was called for other reasons???

    local title=""
    case "$COMMAND" in
        screenshot) title="Screenshot captured" ;;
        record) title="Screen recording captured" ;;
    esac

    local message=""
    [ $COPY -eq 1 ] && message+="Copied to the clipboard.\n"
    [ $SAVE -eq 1 ] && message+="Saved in <i>$SAVE_PATH</i>.\n"

    Print -1 "Notifying for command '$COMMAND':\n$message[EOT]\n"

    # TODO: Create a thumbnail for video recordings

    # This function contains common notification parameters regardless of
    # actions.
    _notify() {
        notify-send "$title" "$message" \
            -t "$NOTIF_TIMEOUT" -a HyprCap -r $NOTIF_ID \
            -i "$CAPTURE_PATH" "$@"
    }

    if [ $ACTIONS -eq 1 ]; then
        _notify "${ACTIONS_ARGS[@]}"
    else
        _notify
    fi
}

# --------------- Post-capture actions ---------------

function act() {
    Print -1 "Notification action requested: $1\n"
    case "$1" in
        save)
            # TODO: implement choosing through an xdg-desktop-portal file dialog
            save_capture;;
        copy)
            copy_capture;;
        # edit)
        #     edit_capture;;
        *)
            Print -E "Error: Unknown action '$1'.\n"
            return 1
            ;;
    esac
}

function save_capture() {
    SAVE=1 # In case it was called for other reasons

    # If output directory or filename are not set, use the default ones
    if [ "$COMMAND" == "screenshot" ]; then
        OUTPUT_DIR="${OUTPUT_DIR:-$DEF_SCREENSHOT_DIR}"
        FILENAME="${FILENAME:-$DEF_SCREENSHOT_FILENAME}"
    elif [ "$COMMAND" == "record" ]; then
        OUTPUT_DIR="${OUTPUT_DIR:-$DEF_RECORDING_DIR}"
        FILENAME="${FILENAME:-$DEF_RECORDING_FILENAME}"
    fi
    SAVE_PATH="$OUTPUT_DIR/$FILENAME"

    Print -1 "Saving capture to '$SAVE_PATH'\n"

    mkdir -p "$OUTPUT_DIR"
    cp "$CAPTURE_PATH" "$SAVE_PATH"
}

function copy_capture() {
    COPY=1 # In case it was called for other reasons

    Print -1 "Copying capture to clipboard\n"

    if [ "$COMMAND" == "screenshot" ]; then
        wl-copy --type image/png < "$CAPTURE_PATH"
    elif [ "$COMMAND" == "record" ]; then
        NYI && exit 1 # TODO: Remove when implemented
    fi
}

# function edit_capture() {
#     swappy -f "$CAPTURE_FULLPATH" -o "$SAVE_FULLPATH"
# }

# --------------- Freezing ---------------

function unfreeze() {
    Print -1 "Unfreezing the screen\n"

    if [ -n "$HYPRPICKER_PID" ]; then
        kill "$HYPRPICKER_PID"
        unset HYPRPICKER_PID
    else # In case we messed up
        Print -E "Error: lost the hyprpicker PID, using pkill.\n"
        pkill hyprpicker
        exit 1
    fi
}

function freeze() {
    FREEZE=1 # In case it was called for other reasons
    Print -1 "Freezing the screen\n"

    if [ -n "$HYPRPICKER_PID" ]; then
        Print -E "Error: hyprpicker is already running.\n"
        exit 1
    fi

    if command -v hyprpicker >/dev/null; then
        hyprpicker -rzq &
        HYPRPICKER_PID=$!
        sleep 0.2
    else
        Print -E "Error: hyprpicker is not installed. Cannot freeze.\n"
        exit 1
    fi
}

# =============== Argument parsing ===============

function args() {
    local OPTS="s:wo:f:Fcd:znNaAt:rVqvh"
    local LONG_OPTS="select:,write,output-dir:,filename:,no-file,copy,"
    LONG_OPTS+="delay:,freeze,"
    LONG_OPTS+="notify,no-notify,actions,no-actions,notif-timeout:"
    LONG_OPTS+="raw,verbose,quiet,disable-title,version,help"

    local options=$(getopt -o $OPTS --long $LONG_OPTS -- "$@")
    eval set -- "$options"

    while true; do
        case "$1" in
            -s | --select)
                local selection="$2" # Parsing is done later
                shift;;

            -w | --write)
                SAVE=1
                ;;
            -o | --output-dir)
                SAVE=1
                OUTPUT_DIR="$2"
                shift;;
            -f | --filename)
                SAVE=1
                FILENAME="$2"
                shift;;
            -F | --no-file)
                SAVE=0
                ;;
            -c | --copy)
                COPY=1
                ;;

            -d | --delay)
                DELAY="$2"
                shift;;
            -z | --freeze)
                FREEZE=1
                ;;

            -n | --notify)
                NOTIFY=1
                ;;
            -N | --no-notify)
                NOTIFY=0
                ;;
            -a | --actions)
                ACTIONS=1
                ;;
            -A | --no-actions)
                ACTIONS=0
                ;;
            -t | --notif-timeout)
                NOTIF_TIMEOUT=$2
                shift;;

            -r | --raw)
                RAW=1
                ;;
            --disable-title)
                DISABLE_TITLE=1
                ;;
            -v | --verbose)
                VERBOSE+=1
                ;;
            -q | --quiet)
                VERBOSE=-1
                ;;
            -V | --version)
                Version
                exit 0;;
            -h | --help)
                Help
                exit 0;;

            --) # Marks the end of options
                shift && break;;
        esac
        shift
    done
    shift # Remove the command itself from the arguments

    # -- Command --
    # Check if a command was specified
    if [ -z "$1" ]; then
        Print -E "Fatal: No command specified. Use --help for help.\n"
        exit 1
    fi
    COMMAND=$(parse_command "$1")

    # -- Selection --
    # If a selection was not specified already and there is another argument,
    # use it as the selection
    [ -z "$selection" -a -n "$2" ] && selection="$2"

    # Parse into a standard format
    [ -n "$selection" ] && parse_selection "$selection"

    # -- Check option compatibility --
    case "$COMMAND" in rec*)
        # Freeze is not compatible with recording
        if [ $FREEZE -eq 1 ]; then
            Print -E "Warning: Cannot freeze the screen while recording.\n"
            FREEZE=0
        fi
    esac
}

function parse_command() {
    case "$1" in
        shot | screenshot)
            echo "screenshot"
            ;;
        rec | record)
            Print -1 "Resolving recording toggle.\n"
            [ -f "$REC_PID_PATH" ] && echo "record-stop" || echo "record-start"
            ;;
        rec-start | record-start)
            echo "record-start"
            ;;
        rec-stop | record-stop)
            echo "record-stop"
            ;;
        *)
            Print -E "Fatal: Unknown command '$1'\n"
            exit 1
            ;;
    esac
}

function parse_selection() {
    local selection=

    case "$1" in
        region:*) # Region may specify the geometry directly
            selection="${1#region:}"
            ;;
        *:active)
            SELECT_ACTIVE=1
            selection="${1%:active}"
            ;;
        *:* | *:*)
            SELECT_MATCH="${1#*:}"
            selection="${1%%:$SELECT_MATCH}"
            ;;
        *)
            selection="$1"
            ;;
    esac

    case "$selection" in
        window | region | monitor)
            SELECTION="$selection"
            ;;
        *,*,*x*) # Geometry in the form X,Y,WxH: translate to X,Y WxH
            SELECTION="${selection%,*} ${selection#*,*,}"
            ;;
        *)
            Print -E "Error: Unknown selection '$1'\n"
            return 1;;
    esac
}

function prompt_selection() {
    check_cmd $DMENU_COMMAND || return 1

    # visible_windows=$(list_geometry)

    dmenu_text=$'Region\nActive monitor\nMonitor\nActive window\nWindow\n'
    # dmenu_text+=$(echo $visible_windows | jq -r '"Window:\t\(.title)"')

    option_name=$(echo "$dmenu_text" | $DMENU_COMMAND)

    if [ -z "$option_name" ]; then
        Print -1 "Selection menu cancelled.\n"
        return 1
    fi

    case "$option_name" in Active*) # Current monitor or window
        SELECT_ACTIVE=1
        ;;
    esac
    case "$option_name" in
        *[Mm]onitor)
            SELECTION=monitor
            ;;
        *[Ww]indow)
            SELECTION=window
            ;;
        Region)
            SELECTION=region
            ;;
        # *)
        #     parse_mode "$option_name"
        #     ;;
    esac
    sleep 0.1; # Because sometimes it takes just a moment to fade out
}

# =============== Main flow ===============

# ---- Pre-init ----

# Set terminal title. This prevents self-matching when selecting windows
# by name
[ $DISABLE_TITLE -ne 1 ] && [ -t 1 ] && echo -ne "\033]0;HyprCap\007"

# Not with constants because it can change
CAPTURE_PATH="$CACHE_DIR/$CAPTURE_FILENAME"

# ---- Options and defaults ----

# Selection
SELECTION=
SELECT_ACTIVE=0
SELECT_MATCH=

# Saving
SAVE=0
OUTPUT_DIR=
FILENAME=
SAVE_PATH=
COPY=0

# Behavior
FREEZE=0
DELAY= # Empty by default. Not the same as explicit 0.
DISABLE_TITLE=0 # Disable terminal title setting

# Notifications
NOTIFY=1
NOTIF_TIMEOUT=10000
ACTIONS=1

# Output
VERBOSE=0
RAW=0

# ---- Parse arguments ----
args $0 "$@"

Print -1 "Running HyprCap version $VERSION\n"
Print -1 "Command selected: $COMMAND\n"

# ---- Early exit commands ----
if [ "$COMMAND" = "record-stop" ]; then
    Print -1 "Stopping recording...\n"
    if ! record_stop; then
        Print -E "Fatal: Failed to stop screen recording.\n"
        exit 1
    fi
    exit 0
fi

# ---- Init ----

[ $FREEZE -eq 1 ] && freeze

[ -z "$SELECTION" ] && prompt_selection

# Handle no selection
if [ -z "$SELECTION" -a "$COMMAND" != "record-stop" ]; then
    Print -E "Fatal: No selection specified. Use --help for help.\n"
    exit 1
fi

Print -1 "Selection: $SELECTION"
Print -1 " (active: ${SELECT_ACTIVE:-no}, match: '$SELECT_MATCH')\n"

# ---- Get geometry ----

GEOMETRY=$(get_geometry)

case "$GEOMETRY" in
    *[0-9]*,*[0-9]*' '[0-9]*x[0-9]*) # Valid geometry
        ;;
    *)
        Print -E "Fatal: Resolved geometry '$GEOMETRY' is invalid.\n"
        exit 1;;
esac

Print -1 "Geometry: $GEOMETRY\n"

# ---- Pre-capture ----
# String comparison doesn't fail with decimals and allows explicit 0
if [ -n "$DELAY" ]; then
    Print -1 "Delaying for $DELAY seconds...\n"
    sleep $DELAY
fi

mkdir -p "$CACHE_DIR"

# ---- Capture ----

case "$COMMAND" in
    screenshot)
        Print -1 "Taking a screenshot of $GEOMETRY\n"
        if ! screenshot; then
            # If the screenshot command fails, exit with an error
            Print -E "Fatal: Failed to take a screenshot.\n"
            exit 1
        fi
        ;;
    record | record-start)
        CAPTURE_PATH="$CAPTURE_PATH.mp4" # Ensure the file has the right extension
        if ! record_start; then
            Print -E "Fatal: Screen recording failed.\n"
            exit 1
        fi
        ;;
    # TODO: Maybe add a simple command to print the geometry
    *)
        Print -E "Fatal: Unknown command '$COMMAND'.\n"
        exit 1
        ;;
esac

# ---- Post-capture ----

[ $FREEZE -eq 1 ] && unfreeze

[ $SAVE -eq 1 ] && save_capture

[ $COPY -eq 1 ] && copy_capture

if [ $RAW -eq 1 ]; then
    cat "$CAPTURE_PATH"
# If output isn't raw and --quiet isn't set, print the path to the capture
elif [ $VERBOSE -ge 0 ]; then
    # Prints the save path if set (when using -w, -o and/or -f), otherwise
    # a path to the transient capture file in the cache dir.
    echo "${SAVE_PATH:-$CAPTURE_PATH}"
fi

if [ $NOTIFY -eq 1 ]; then
    while
        action="$(notify)"
        [ "$action" = "default" ] && action="save"
        # If this line succeeds, the loop runs again
        [ $ACTIONS -eq 1 -a -n "$action" ] && act "$action"
    do true; done
fi

# This ensures a clean exit code if the last line 'fails'
exit 0
